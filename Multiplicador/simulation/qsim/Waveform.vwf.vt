// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2025 14:03:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          multi_8b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multi_8b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg inicio;
reg [7:0] multiplicador;
reg [15:0] multiplicando;
reg rst;
// wires                                               
wire fim;
wire [15:0] produto;

// assign statements (if any)                          
multi_8b i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.fim(fim),
	.inicio(inicio),
	.multiplicador(multiplicador),
	.multiplicando(multiplicando),
	.produto(produto),
	.rst(rst)
);
initial 
begin 
#1000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
end 

// inicio
initial
begin
	inicio = 1'b0;
	inicio = #10000 1'b1;
	inicio = #10000 1'b0;
end 
// multiplicador[ 7 ]
initial
begin
	multiplicador[7] = 1'b0;
end 
// multiplicador[ 6 ]
initial
begin
	multiplicador[6] = 1'b0;
end 
// multiplicador[ 5 ]
initial
begin
	multiplicador[5] = 1'b0;
end 
// multiplicador[ 4 ]
initial
begin
	multiplicador[4] = 1'b0;
end 
// multiplicador[ 3 ]
initial
begin
	multiplicador[3] = 1'b0;
end 
// multiplicador[ 2 ]
initial
begin
	multiplicador[2] = 1'b1;
end 
// multiplicador[ 1 ]
initial
begin
	multiplicador[1] = 1'b0;
end 
// multiplicador[ 0 ]
initial
begin
	multiplicador[0] = 1'b1;
end 
// multiplicando[ 15 ]
initial
begin
	multiplicando[15] = 1'b0;
end 
// multiplicando[ 14 ]
initial
begin
	multiplicando[14] = 1'b0;
end 
// multiplicando[ 13 ]
initial
begin
	multiplicando[13] = 1'b0;
end 
// multiplicando[ 12 ]
initial
begin
	multiplicando[12] = 1'b0;
end 
// multiplicando[ 11 ]
initial
begin
	multiplicando[11] = 1'b0;
end 
// multiplicando[ 10 ]
initial
begin
	multiplicando[10] = 1'b0;
end 
// multiplicando[ 9 ]
initial
begin
	multiplicando[9] = 1'b0;
end 
// multiplicando[ 8 ]
initial
begin
	multiplicando[8] = 1'b0;
end 
// multiplicando[ 7 ]
initial
begin
	multiplicando[7] = 1'b0;
end 
// multiplicando[ 6 ]
initial
begin
	multiplicando[6] = 1'b0;
end 
// multiplicando[ 5 ]
initial
begin
	multiplicando[5] = 1'b0;
end 
// multiplicando[ 4 ]
initial
begin
	multiplicando[4] = 1'b0;
end 
// multiplicando[ 3 ]
initial
begin
	multiplicando[3] = 1'b0;
end 
// multiplicando[ 2 ]
initial
begin
	multiplicando[2] = 1'b1;
end 
// multiplicando[ 1 ]
initial
begin
	multiplicando[1] = 1'b1;
end 
// multiplicando[ 0 ]
initial
begin
	multiplicando[0] = 1'b1;
end 
endmodule

